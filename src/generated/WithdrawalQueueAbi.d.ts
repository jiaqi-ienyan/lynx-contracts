/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WithdrawalQueueAbiInterface extends ethers.utils.Interface {
  functions: {
    "BUNKER_MODE_DISABLED_TIMESTAMP()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FINALIZE_ROLE()": FunctionFragment;
    "MANAGE_TOKEN_URI_ROLE()": FunctionFragment;
    "MAX_BATCHES_LENGTH()": FunctionFragment;
    "MAX_STETH_WITHDRAWAL_AMOUNT()": FunctionFragment;
    "MIN_STETH_WITHDRAWAL_AMOUNT()": FunctionFragment;
    "ORACLE_ROLE()": FunctionFragment;
    "PAUSE_INFINITELY()": FunctionFragment;
    "PAUSE_ROLE()": FunctionFragment;
    "RESUME_ROLE()": FunctionFragment;
    "STETH()": FunctionFragment;
    "WSTETH()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bunkerModeSinceTimestamp()": FunctionFragment;
    "calculateFinalizationBatches(uint256,uint256,uint256,(uint256,bool,uint256[36],uint256))": FunctionFragment;
    "claimWithdrawal(uint256)": FunctionFragment;
    "claimWithdrawals(uint256[],uint256[])": FunctionFragment;
    "claimWithdrawalsTo(uint256[],uint256[],address)": FunctionFragment;
    "finalize(uint256,uint256)": FunctionFragment;
    "findCheckpointHints(uint256[],uint256,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBaseURI()": FunctionFragment;
    "getClaimableEther(uint256[],uint256[])": FunctionFragment;
    "getContractVersion()": FunctionFragment;
    "getLastCheckpointIndex()": FunctionFragment;
    "getLastFinalizedRequestId()": FunctionFragment;
    "getLastRequestId()": FunctionFragment;
    "getLockedEtherAmount()": FunctionFragment;
    "getNFTDescriptorAddress()": FunctionFragment;
    "getResumeSinceTimestamp()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getWithdrawalRequests(address)": FunctionFragment;
    "getWithdrawalStatus(uint256[])": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isBunkerModeActive()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "name()": FunctionFragment;
    "onOracleReport(bool,uint256,uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pauseFor(uint256)": FunctionFragment;
    "pauseUntil(uint256)": FunctionFragment;
    "prefinalize(uint256[],uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestWithdrawals(uint256[],address)": FunctionFragment;
    "requestWithdrawalsWithPermit(uint256[],address,(uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "requestWithdrawalsWstETH(uint256[],address)": FunctionFragment;
    "requestWithdrawalsWstETHWithPermit(uint256[],address,(uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "resume()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setNFTDescriptorAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unfinalizedRequestNumber()": FunctionFragment;
    "unfinalizedStETH()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BUNKER_MODE_DISABLED_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINALIZE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGE_TOKEN_URI_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BATCHES_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_STETH_WITHDRAWAL_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STETH_WITHDRAWAL_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSE_INFINITELY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESUME_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "STETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "WSTETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bunkerModeSinceTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFinalizationBatches",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        remainingEthBudget: BigNumberish;
        finished: boolean;
        batches: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        batchesLength: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawals",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawalsTo",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findCheckpointHints",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableEther",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCheckpointIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastFinalizedRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedEtherAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTDescriptorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResumeSinceTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalRequests",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalStatus",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBunkerModeActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onOracleReport",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseUntil",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prefinalize",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawals",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawalsWithPermit",
    values: [
      BigNumberish[],
      string,
      {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawalsWstETH",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawalsWstETHWithPermit",
    values: [
      BigNumberish[],
      string,
      {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNFTDescriptorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfinalizedRequestNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unfinalizedStETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BUNKER_MODE_DISABLED_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FINALIZE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGE_TOKEN_URI_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BATCHES_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_STETH_WITHDRAWAL_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STETH_WITHDRAWAL_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSE_INFINITELY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PAUSE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RESUME_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WSTETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bunkerModeSinceTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFinalizationBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawalsTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findCheckpointHints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCheckpointIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastFinalizedRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedEtherAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTDescriptorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResumeSinceTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBunkerModeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onOracleReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseUntil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prefinalize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawalsWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawalsWstETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawalsWstETHWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNFTDescriptorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfinalizedRequestNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfinalizedStETH",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseURISet(string)": EventFragment;
    "BatchMetadataUpdate(uint256,uint256)": EventFragment;
    "BunkerModeDisabled()": EventFragment;
    "BunkerModeEnabled(uint256)": EventFragment;
    "ContractVersionSet(uint256)": EventFragment;
    "InitializedV1(address)": EventFragment;
    "MetadataUpdate(uint256)": EventFragment;
    "NftDescriptorAddressSet(address)": EventFragment;
    "Paused(uint256)": EventFragment;
    "Resumed()": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "WithdrawalClaimed(uint256,address,address,uint256)": EventFragment;
    "WithdrawalRequested(uint256,address,address,uint256,uint256)": EventFragment;
    "WithdrawalsFinalized(uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchMetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BunkerModeDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BunkerModeEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractVersionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializedV1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftDescriptorAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalsFinalized"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type BaseURISetEvent = TypedEvent<[string] & { baseURI: string }>;

export type BatchMetadataUpdateEvent = TypedEvent<
  [BigNumber, BigNumber] & { _fromTokenId: BigNumber; _toTokenId: BigNumber }
>;

export type BunkerModeDisabledEvent = TypedEvent<[] & {}>;

export type BunkerModeEnabledEvent = TypedEvent<
  [BigNumber] & { _sinceTimestamp: BigNumber }
>;

export type ContractVersionSetEvent = TypedEvent<
  [BigNumber] & { version: BigNumber }
>;

export type InitializedV1Event = TypedEvent<[string] & { _admin: string }>;

export type MetadataUpdateEvent = TypedEvent<
  [BigNumber] & { _tokenId: BigNumber }
>;

export type NftDescriptorAddressSetEvent = TypedEvent<
  [string] & { nftDescriptorAddress: string }
>;

export type PausedEvent = TypedEvent<[BigNumber] & { duration: BigNumber }>;

export type ResumedEvent = TypedEvent<[] & {}>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export type WithdrawalClaimedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    requestId: BigNumber;
    owner: string;
    receiver: string;
    amountOfETH: BigNumber;
  }
>;

export type WithdrawalRequestedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    requestId: BigNumber;
    requestor: string;
    owner: string;
    amountOfStETH: BigNumber;
    amountOfShares: BigNumber;
  }
>;

export type WithdrawalsFinalizedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    from: BigNumber;
    to: BigNumber;
    amountOfETHLocked: BigNumber;
    sharesToBurn: BigNumber;
    timestamp: BigNumber;
  }
>;

export class WithdrawalQueueAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WithdrawalQueueAbiInterface;

  functions: {
    BUNKER_MODE_DISABLED_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FINALIZE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGE_TOKEN_URI_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_BATCHES_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_STETH_WITHDRAWAL_AMOUNT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_STETH_WITHDRAWAL_AMOUNT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ORACLE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSE_INFINITELY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    RESUME_ROLE(overrides?: CallOverrides): Promise<[string]>;

    STETH(overrides?: CallOverrides): Promise<[string]>;

    WSTETH(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bunkerModeSinceTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateFinalizationBatches(
      _maxShareRate: BigNumberish,
      _maxTimestamp: BigNumberish,
      _maxRequestsPerCall: BigNumberish,
      _state: {
        remainingEthBudget: BigNumberish;
        finished: boolean;
        batches: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        batchesLength: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          boolean,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber
        ] & {
          remainingEthBudget: BigNumber;
          finished: boolean;
          batches: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          batchesLength: BigNumber;
        }
      ]
    >;

    claimWithdrawal(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimWithdrawals(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimWithdrawalsTo(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalize(
      _lastRequestIdToBeFinalized: BigNumberish,
      _maxShareRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findCheckpointHints(
      _requestIds: BigNumberish[],
      _firstIndex: BigNumberish,
      _lastIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { hintIds: BigNumber[] }>;

    getApproved(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBaseURI(overrides?: CallOverrides): Promise<[string]>;

    getClaimableEther(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { claimableEthValues: BigNumber[] }>;

    getContractVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastCheckpointIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastFinalizedRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLockedEtherAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNFTDescriptorAddress(overrides?: CallOverrides): Promise<[string]>;

    getResumeSinceTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawalRequests(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { requestsIds: BigNumber[] }>;

    getWithdrawalStatus(
      _requestIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
          amountOfStETH: BigNumber;
          amountOfShares: BigNumber;
          owner: string;
          timestamp: BigNumber;
          isFinalized: boolean;
          isClaimed: boolean;
        })[]
      ] & {
        statuses: ([
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          boolean,
          boolean
        ] & {
          amountOfStETH: BigNumber;
          amountOfShares: BigNumber;
          owner: string;
          timestamp: BigNumber;
          isFinalized: boolean;
          isClaimed: boolean;
        })[];
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBunkerModeActive(overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onOracleReport(
      _isBunkerModeNow: boolean,
      _bunkerStartTimestamp: BigNumberish,
      _currentReportTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pauseFor(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseUntil(
      _pauseUntilInclusive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prefinalize(
      _batches: BigNumberish[],
      _maxShareRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ethToLock: BigNumber; sharesToBurn: BigNumber }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawals(
      _amounts: BigNumberish[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawalsWithPermit(
      _amounts: BigNumberish[],
      _owner: string,
      _permit: {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawalsWstETH(
      _amounts: BigNumberish[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawalsWstETHWithPermit(
      _amounts: BigNumberish[],
      _owner: string,
      _permit: {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTDescriptorAddress(
      _nftDescriptorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unfinalizedRequestNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    unfinalizedStETH(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BUNKER_MODE_DISABLED_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FINALIZE_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGE_TOKEN_URI_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_BATCHES_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_STETH_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_STETH_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  ORACLE_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSE_INFINITELY(overrides?: CallOverrides): Promise<BigNumber>;

  PAUSE_ROLE(overrides?: CallOverrides): Promise<string>;

  RESUME_ROLE(overrides?: CallOverrides): Promise<string>;

  STETH(overrides?: CallOverrides): Promise<string>;

  WSTETH(overrides?: CallOverrides): Promise<string>;

  approve(
    _to: string,
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  bunkerModeSinceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  calculateFinalizationBatches(
    _maxShareRate: BigNumberish,
    _maxTimestamp: BigNumberish,
    _maxRequestsPerCall: BigNumberish,
    _state: {
      remainingEthBudget: BigNumberish;
      finished: boolean;
      batches: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
      batchesLength: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber
    ] & {
      remainingEthBudget: BigNumber;
      finished: boolean;
      batches: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      batchesLength: BigNumber;
    }
  >;

  claimWithdrawal(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimWithdrawals(
    _requestIds: BigNumberish[],
    _hints: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimWithdrawalsTo(
    _requestIds: BigNumberish[],
    _hints: BigNumberish[],
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalize(
    _lastRequestIdToBeFinalized: BigNumberish,
    _maxShareRate: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findCheckpointHints(
    _requestIds: BigNumberish[],
    _firstIndex: BigNumberish,
    _lastIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getApproved(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBaseURI(overrides?: CallOverrides): Promise<string>;

  getClaimableEther(
    _requestIds: BigNumberish[],
    _hints: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getContractVersion(overrides?: CallOverrides): Promise<BigNumber>;

  getLastCheckpointIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getLastFinalizedRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  getLockedEtherAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getNFTDescriptorAddress(overrides?: CallOverrides): Promise<string>;

  getResumeSinceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawalRequests(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getWithdrawalStatus(
    _requestIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
      amountOfStETH: BigNumber;
      amountOfShares: BigNumber;
      owner: string;
      timestamp: BigNumber;
      isFinalized: boolean;
      isClaimed: boolean;
    })[]
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBunkerModeActive(overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onOracleReport(
    _isBunkerModeNow: boolean,
    _bunkerStartTimestamp: BigNumberish,
    _currentReportTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(_requestId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pauseFor(
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseUntil(
    _pauseUntilInclusive: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prefinalize(
    _batches: BigNumberish[],
    _maxShareRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { ethToLock: BigNumber; sharesToBurn: BigNumber }
  >;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawals(
    _amounts: BigNumberish[],
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawalsWithPermit(
    _amounts: BigNumberish[],
    _owner: string,
    _permit: {
      value: BigNumberish;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawalsWstETH(
    _amounts: BigNumberish[],
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawalsWstETHWithPermit(
    _amounts: BigNumberish[],
    _owner: string,
    _permit: {
      value: BigNumberish;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    _from: string,
    _to: string,
    _requestId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTDescriptorAddress(
    _nftDescriptorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    _from: string,
    _to: string,
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unfinalizedRequestNumber(overrides?: CallOverrides): Promise<BigNumber>;

  unfinalizedStETH(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BUNKER_MODE_DISABLED_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FINALIZE_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGE_TOKEN_URI_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_BATCHES_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STETH_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STETH_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSE_INFINITELY(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<string>;

    RESUME_ROLE(overrides?: CallOverrides): Promise<string>;

    STETH(overrides?: CallOverrides): Promise<string>;

    WSTETH(overrides?: CallOverrides): Promise<string>;

    approve(
      _to: string,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bunkerModeSinceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFinalizationBatches(
      _maxShareRate: BigNumberish,
      _maxTimestamp: BigNumberish,
      _maxRequestsPerCall: BigNumberish,
      _state: {
        remainingEthBudget: BigNumberish;
        finished: boolean;
        batches: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        batchesLength: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber
      ] & {
        remainingEthBudget: BigNumber;
        finished: boolean;
        batches: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        batchesLength: BigNumber;
      }
    >;

    claimWithdrawal(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimWithdrawals(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimWithdrawalsTo(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    finalize(
      _lastRequestIdToBeFinalized: BigNumberish,
      _maxShareRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    findCheckpointHints(
      _requestIds: BigNumberish[],
      _firstIndex: BigNumberish,
      _lastIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getApproved(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBaseURI(overrides?: CallOverrides): Promise<string>;

    getClaimableEther(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getContractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCheckpointIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getLastFinalizedRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    getLockedEtherAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTDescriptorAddress(overrides?: CallOverrides): Promise<string>;

    getResumeSinceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalRequests(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getWithdrawalStatus(
      _requestIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, string, BigNumber, boolean, boolean] & {
        amountOfStETH: BigNumber;
        amountOfShares: BigNumber;
        owner: string;
        timestamp: BigNumber;
        isFinalized: boolean;
        isClaimed: boolean;
      })[]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBunkerModeActive(overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onOracleReport(
      _isBunkerModeNow: boolean,
      _bunkerStartTimestamp: BigNumberish,
      _currentReportTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseFor(_duration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    pauseUntil(
      _pauseUntilInclusive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    prefinalize(
      _batches: BigNumberish[],
      _maxShareRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ethToLock: BigNumber; sharesToBurn: BigNumber }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawals(
      _amounts: BigNumberish[],
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    requestWithdrawalsWithPermit(
      _amounts: BigNumberish[],
      _owner: string,
      _permit: {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    requestWithdrawalsWstETH(
      _amounts: BigNumberish[],
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    requestWithdrawalsWstETHWithPermit(
      _amounts: BigNumberish[],
      _owner: string,
      _permit: {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    resume(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    setNFTDescriptorAddress(
      _nftDescriptorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unfinalizedRequestNumber(overrides?: CallOverrides): Promise<BigNumber>;

    unfinalizedStETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "BaseURISet(string)"(
      baseURI?: null
    ): TypedEventFilter<[string], { baseURI: string }>;

    BaseURISet(baseURI?: null): TypedEventFilter<[string], { baseURI: string }>;

    "BatchMetadataUpdate(uint256,uint256)"(
      _fromTokenId?: null,
      _toTokenId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _fromTokenId: BigNumber; _toTokenId: BigNumber }
    >;

    BatchMetadataUpdate(
      _fromTokenId?: null,
      _toTokenId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _fromTokenId: BigNumber; _toTokenId: BigNumber }
    >;

    "BunkerModeDisabled()"(): TypedEventFilter<[], {}>;

    BunkerModeDisabled(): TypedEventFilter<[], {}>;

    "BunkerModeEnabled(uint256)"(
      _sinceTimestamp?: null
    ): TypedEventFilter<[BigNumber], { _sinceTimestamp: BigNumber }>;

    BunkerModeEnabled(
      _sinceTimestamp?: null
    ): TypedEventFilter<[BigNumber], { _sinceTimestamp: BigNumber }>;

    "ContractVersionSet(uint256)"(
      version?: null
    ): TypedEventFilter<[BigNumber], { version: BigNumber }>;

    ContractVersionSet(
      version?: null
    ): TypedEventFilter<[BigNumber], { version: BigNumber }>;

    "InitializedV1(address)"(
      _admin?: null
    ): TypedEventFilter<[string], { _admin: string }>;

    InitializedV1(
      _admin?: null
    ): TypedEventFilter<[string], { _admin: string }>;

    "MetadataUpdate(uint256)"(
      _tokenId?: null
    ): TypedEventFilter<[BigNumber], { _tokenId: BigNumber }>;

    MetadataUpdate(
      _tokenId?: null
    ): TypedEventFilter<[BigNumber], { _tokenId: BigNumber }>;

    "NftDescriptorAddressSet(address)"(
      nftDescriptorAddress?: null
    ): TypedEventFilter<[string], { nftDescriptorAddress: string }>;

    NftDescriptorAddressSet(
      nftDescriptorAddress?: null
    ): TypedEventFilter<[string], { nftDescriptorAddress: string }>;

    "Paused(uint256)"(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    Paused(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    "Resumed()"(): TypedEventFilter<[], {}>;

    Resumed(): TypedEventFilter<[], {}>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    "WithdrawalClaimed(uint256,address,address,uint256)"(
      requestId?: BigNumberish | null,
      owner?: string | null,
      receiver?: string | null,
      amountOfETH?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        requestId: BigNumber;
        owner: string;
        receiver: string;
        amountOfETH: BigNumber;
      }
    >;

    WithdrawalClaimed(
      requestId?: BigNumberish | null,
      owner?: string | null,
      receiver?: string | null,
      amountOfETH?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        requestId: BigNumber;
        owner: string;
        receiver: string;
        amountOfETH: BigNumber;
      }
    >;

    "WithdrawalRequested(uint256,address,address,uint256,uint256)"(
      requestId?: BigNumberish | null,
      requestor?: string | null,
      owner?: string | null,
      amountOfStETH?: null,
      amountOfShares?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        requestId: BigNumber;
        requestor: string;
        owner: string;
        amountOfStETH: BigNumber;
        amountOfShares: BigNumber;
      }
    >;

    WithdrawalRequested(
      requestId?: BigNumberish | null,
      requestor?: string | null,
      owner?: string | null,
      amountOfStETH?: null,
      amountOfShares?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        requestId: BigNumber;
        requestor: string;
        owner: string;
        amountOfStETH: BigNumber;
        amountOfShares: BigNumber;
      }
    >;

    "WithdrawalsFinalized(uint256,uint256,uint256,uint256,uint256)"(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      amountOfETHLocked?: null,
      sharesToBurn?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        from: BigNumber;
        to: BigNumber;
        amountOfETHLocked: BigNumber;
        sharesToBurn: BigNumber;
        timestamp: BigNumber;
      }
    >;

    WithdrawalsFinalized(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      amountOfETHLocked?: null,
      sharesToBurn?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        from: BigNumber;
        to: BigNumber;
        amountOfETHLocked: BigNumber;
        sharesToBurn: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    BUNKER_MODE_DISABLED_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FINALIZE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGE_TOKEN_URI_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BATCHES_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STETH_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STETH_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSE_INFINITELY(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    RESUME_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    STETH(overrides?: CallOverrides): Promise<BigNumber>;

    WSTETH(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bunkerModeSinceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFinalizationBatches(
      _maxShareRate: BigNumberish,
      _maxTimestamp: BigNumberish,
      _maxRequestsPerCall: BigNumberish,
      _state: {
        remainingEthBudget: BigNumberish;
        finished: boolean;
        batches: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        batchesLength: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimWithdrawal(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimWithdrawals(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimWithdrawalsTo(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalize(
      _lastRequestIdToBeFinalized: BigNumberish,
      _maxShareRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findCheckpointHints(
      _requestIds: BigNumberish[],
      _firstIndex: BigNumberish,
      _lastIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableEther(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCheckpointIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getLastFinalizedRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    getLockedEtherAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTDescriptorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getResumeSinceTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalRequests(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalStatus(
      _requestIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBunkerModeActive(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onOracleReport(
      _isBunkerModeNow: boolean,
      _bunkerStartTimestamp: BigNumberish,
      _currentReportTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseFor(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseUntil(
      _pauseUntilInclusive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prefinalize(
      _batches: BigNumberish[],
      _maxShareRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawals(
      _amounts: BigNumberish[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawalsWithPermit(
      _amounts: BigNumberish[],
      _owner: string,
      _permit: {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawalsWstETH(
      _amounts: BigNumberish[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawalsWstETHWithPermit(
      _amounts: BigNumberish[],
      _owner: string,
      _permit: {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTDescriptorAddress(
      _nftDescriptorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unfinalizedRequestNumber(overrides?: CallOverrides): Promise<BigNumber>;

    unfinalizedStETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BUNKER_MODE_DISABLED_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FINALIZE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGE_TOKEN_URI_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_BATCHES_LENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_STETH_WITHDRAWAL_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_STETH_WITHDRAWAL_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ORACLE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSE_INFINITELY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESUME_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WSTETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bunkerModeSinceTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFinalizationBatches(
      _maxShareRate: BigNumberish,
      _maxTimestamp: BigNumberish,
      _maxRequestsPerCall: BigNumberish,
      _state: {
        remainingEthBudget: BigNumberish;
        finished: boolean;
        batches: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
        batchesLength: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimWithdrawal(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimWithdrawals(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimWithdrawalsTo(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalize(
      _lastRequestIdToBeFinalized: BigNumberish,
      _maxShareRate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findCheckpointHints(
      _requestIds: BigNumberish[],
      _firstIndex: BigNumberish,
      _lastIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableEther(
      _requestIds: BigNumberish[],
      _hints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastCheckpointIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastFinalizedRequestId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockedEtherAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTDescriptorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResumeSinceTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalRequests(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalStatus(
      _requestIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBunkerModeActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onOracleReport(
      _isBunkerModeNow: boolean,
      _bunkerStartTimestamp: BigNumberish,
      _currentReportTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseFor(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseUntil(
      _pauseUntilInclusive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prefinalize(
      _batches: BigNumberish[],
      _maxShareRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawals(
      _amounts: BigNumberish[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawalsWithPermit(
      _amounts: BigNumberish[],
      _owner: string,
      _permit: {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawalsWstETH(
      _amounts: BigNumberish[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawalsWstETHWithPermit(
      _amounts: BigNumberish[],
      _owner: string,
      _permit: {
        value: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTDescriptorAddress(
      _nftDescriptorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unfinalizedRequestNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unfinalizedStETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
